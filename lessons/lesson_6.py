# Квадратичные сортировки

"""
Количество операций, которое требуется на обработку массива O(n2), где n длина массива

"""

# 1. Сортировка вставками
"""
За опорную точку берется первый элемент. Далее он сранивается с нулевым. Если текущий элемент меньше нулевого, то они меняются местами. Далее берется элемент n+2, который сравнивается со всемми предыдущими. И так далее для каждого последующего элемента.
Выполняет за один проход. Движение справа налево.

"""


def insert_sort(A):
    """Сортировка вставками списка А"""

    for i in range(1, len(A)):
        k = i
        while k > 0 and A[k] < A[k-1]:
            A[k], A[k-1] = A[k-1], A[k]
            k -= 1


# 2. Сортировка выбором
"""
1. За опорную точку берется нулевое значение массива, это значение сравнивается со всеми остальными значениями этого массива и ищется максимум или мининимум.
2. Найденный элемент меняется местами с нулевым элементом.
3. А дальше все заново с пункта 1.
Выполняет за один проход.
"""


def selection_sort(A):
    """Сортировка выбором списка А"""
    index = 0
    smallest = A[index]
    for i in range(0, len(A)-1):
        for j in range(i+1, len(A)):
            if A[j] < A[i]:
                A[i], A[j] = A[j], A[i]


# 3. Сортировка методом пузырька
"""
За опорную точку берется нулевой элемент, который сравнивается с n+1, далее
n+1 сравнивается с n+2 и так до конца массива. В конец массива попадает наибольшее или наименьшее значение.
Выполняет за n-1 проход.
"""


def bubble_sort(A):
    """Сортировка пузырьком списка А"""

    for n in range(0, len(A)-1):
        for j in range(0, len(A)-1-n):
            if A[j] > A[j+1]:
                A[j], A[j+1] = A[j+1], A[j]


# Методика Test-Driven Development (TDD)
def test_sort(sort_algorithm):
    print("Тестируем:", sort_algorithm.__doc__)
    print("#test_1: ", end="")
    A = [4, 2, 5, 1, 3]
    A_sorted = [1, 2, 3, 4, 5]
    sort_algorithm(A)
    print("Ok" if A == A_sorted else "Fail")

    print("#test_2: ", end="")
    A = list(range(10, 20)) + list(range(0, 10))
    A_sorted = list(range(20))
    sort_algorithm(A)
    print("Ok" if A == A_sorted else "Fail")

    print("#test_3: ", end="")
    A = [4, 2, 4, 1, -1]
    A_sorted = [-1, 1, 2, 4, 4]
    sort_algorithm(A)
    print("Ok" if A == A_sorted else "Fail")


if __name__ == "__main__":
    test_sort(insert_sort)
    test_sort(selection_sort)
    test_sort(bubble_sort)
